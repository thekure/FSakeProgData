// Implementation file for parser generated by fsyacc
module CPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "CPar.fsy"

(*	File MicroC/CPar.fsy 
	Parser specification for micro-C, a small imperative language
	sestoft@itu.dk * 2009-09-29
	No (real) shift/reduce conflicts thanks to Niels Kokholm.
*)

open Absyn

let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = CstI 10

# 19 "CPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | ASSIGN
  | AMP
  | NOT
  | SEQOR
  | SEQAND
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | CHAR
  | ELSE
  | IF
  | INT
  | NULL
  | PRINT
  | PRINTLN
  | RETURN
  | VOID
  | WHILE
  | FORLOOP
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTINT of (int)
  | CSTBOOL of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_AMP
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_CHAR
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_INT
    | TOKEN_NULL
    | TOKEN_PRINT
    | TOKEN_PRINTLN
    | TOKEN_RETURN
    | TOKEN_VOID
    | TOKEN_WHILE
    | TOKEN_FORLOOP
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_CSTBOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Topdec
    | NONTERM_Vardec
    | NONTERM_Vardesc
    | NONTERM_Fundec
    | NONTERM_Paramdecs
    | NONTERM_Paramdecs1
    | NONTERM_Block
    | NONTERM_StmtOrDecSeq
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_StmtU
    | NONTERM_Expr
    | NONTERM_ExprNotAccess
    | NONTERM_AtExprNotAccess
    | NONTERM_Access
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_Const
    | NONTERM_Type

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | LBRACE  -> 3 
  | RBRACE  -> 4 
  | LBRACK  -> 5 
  | RBRACK  -> 6 
  | SEMI  -> 7 
  | COMMA  -> 8 
  | ASSIGN  -> 9 
  | AMP  -> 10 
  | NOT  -> 11 
  | SEQOR  -> 12 
  | SEQAND  -> 13 
  | EQ  -> 14 
  | NE  -> 15 
  | GT  -> 16 
  | LT  -> 17 
  | GE  -> 18 
  | LE  -> 19 
  | PLUS  -> 20 
  | MINUS  -> 21 
  | TIMES  -> 22 
  | DIV  -> 23 
  | MOD  -> 24 
  | CHAR  -> 25 
  | ELSE  -> 26 
  | IF  -> 27 
  | INT  -> 28 
  | NULL  -> 29 
  | PRINT  -> 30 
  | PRINTLN  -> 31 
  | RETURN  -> 32 
  | VOID  -> 33 
  | WHILE  -> 34 
  | FORLOOP  -> 35 
  | CSTSTRING _ -> 36 
  | NAME _ -> 37 
  | CSTINT _ -> 38 
  | CSTBOOL _ -> 39 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_LBRACE 
  | 4 -> TOKEN_RBRACE 
  | 5 -> TOKEN_LBRACK 
  | 6 -> TOKEN_RBRACK 
  | 7 -> TOKEN_SEMI 
  | 8 -> TOKEN_COMMA 
  | 9 -> TOKEN_ASSIGN 
  | 10 -> TOKEN_AMP 
  | 11 -> TOKEN_NOT 
  | 12 -> TOKEN_SEQOR 
  | 13 -> TOKEN_SEQAND 
  | 14 -> TOKEN_EQ 
  | 15 -> TOKEN_NE 
  | 16 -> TOKEN_GT 
  | 17 -> TOKEN_LT 
  | 18 -> TOKEN_GE 
  | 19 -> TOKEN_LE 
  | 20 -> TOKEN_PLUS 
  | 21 -> TOKEN_MINUS 
  | 22 -> TOKEN_TIMES 
  | 23 -> TOKEN_DIV 
  | 24 -> TOKEN_MOD 
  | 25 -> TOKEN_CHAR 
  | 26 -> TOKEN_ELSE 
  | 27 -> TOKEN_IF 
  | 28 -> TOKEN_INT 
  | 29 -> TOKEN_NULL 
  | 30 -> TOKEN_PRINT 
  | 31 -> TOKEN_PRINTLN 
  | 32 -> TOKEN_RETURN 
  | 33 -> TOKEN_VOID 
  | 34 -> TOKEN_WHILE 
  | 35 -> TOKEN_FORLOOP 
  | 36 -> TOKEN_CSTSTRING 
  | 37 -> TOKEN_NAME 
  | 38 -> TOKEN_CSTINT 
  | 39 -> TOKEN_CSTBOOL 
  | 42 -> TOKEN_end_of_input
  | 40 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Topdecs 
    | 3 -> NONTERM_Topdecs 
    | 4 -> NONTERM_Topdec 
    | 5 -> NONTERM_Topdec 
    | 6 -> NONTERM_Vardec 
    | 7 -> NONTERM_Vardesc 
    | 8 -> NONTERM_Vardesc 
    | 9 -> NONTERM_Vardesc 
    | 10 -> NONTERM_Vardesc 
    | 11 -> NONTERM_Vardesc 
    | 12 -> NONTERM_Fundec 
    | 13 -> NONTERM_Fundec 
    | 14 -> NONTERM_Paramdecs 
    | 15 -> NONTERM_Paramdecs 
    | 16 -> NONTERM_Paramdecs1 
    | 17 -> NONTERM_Paramdecs1 
    | 18 -> NONTERM_Block 
    | 19 -> NONTERM_StmtOrDecSeq 
    | 20 -> NONTERM_StmtOrDecSeq 
    | 21 -> NONTERM_StmtOrDecSeq 
    | 22 -> NONTERM_Stmt 
    | 23 -> NONTERM_Stmt 
    | 24 -> NONTERM_StmtM 
    | 25 -> NONTERM_StmtM 
    | 26 -> NONTERM_StmtM 
    | 27 -> NONTERM_StmtM 
    | 28 -> NONTERM_StmtM 
    | 29 -> NONTERM_StmtM 
    | 30 -> NONTERM_StmtM 
    | 31 -> NONTERM_StmtU 
    | 32 -> NONTERM_StmtU 
    | 33 -> NONTERM_StmtU 
    | 34 -> NONTERM_StmtU 
    | 35 -> NONTERM_Expr 
    | 36 -> NONTERM_Expr 
    | 37 -> NONTERM_ExprNotAccess 
    | 38 -> NONTERM_ExprNotAccess 
    | 39 -> NONTERM_ExprNotAccess 
    | 40 -> NONTERM_ExprNotAccess 
    | 41 -> NONTERM_ExprNotAccess 
    | 42 -> NONTERM_ExprNotAccess 
    | 43 -> NONTERM_ExprNotAccess 
    | 44 -> NONTERM_ExprNotAccess 
    | 45 -> NONTERM_ExprNotAccess 
    | 46 -> NONTERM_ExprNotAccess 
    | 47 -> NONTERM_ExprNotAccess 
    | 48 -> NONTERM_ExprNotAccess 
    | 49 -> NONTERM_ExprNotAccess 
    | 50 -> NONTERM_ExprNotAccess 
    | 51 -> NONTERM_ExprNotAccess 
    | 52 -> NONTERM_ExprNotAccess 
    | 53 -> NONTERM_ExprNotAccess 
    | 54 -> NONTERM_ExprNotAccess 
    | 55 -> NONTERM_ExprNotAccess 
    | 56 -> NONTERM_AtExprNotAccess 
    | 57 -> NONTERM_AtExprNotAccess 
    | 58 -> NONTERM_AtExprNotAccess 
    | 59 -> NONTERM_Access 
    | 60 -> NONTERM_Access 
    | 61 -> NONTERM_Access 
    | 62 -> NONTERM_Access 
    | 63 -> NONTERM_Access 
    | 64 -> NONTERM_Exprs 
    | 65 -> NONTERM_Exprs 
    | 66 -> NONTERM_Exprs1 
    | 67 -> NONTERM_Exprs1 
    | 68 -> NONTERM_Const 
    | 69 -> NONTERM_Const 
    | 70 -> NONTERM_Const 
    | 71 -> NONTERM_Const 
    | 72 -> NONTERM_Type 
    | 73 -> NONTERM_Type 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 42 
let _fsyacc_tagOfErrorTerminal = 40

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | SEMI  -> "SEMI" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | AMP  -> "AMP" 
  | NOT  -> "NOT" 
  | SEQOR  -> "SEQOR" 
  | SEQAND  -> "SEQAND" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | CHAR  -> "CHAR" 
  | ELSE  -> "ELSE" 
  | IF  -> "IF" 
  | INT  -> "INT" 
  | NULL  -> "NULL" 
  | PRINT  -> "PRINT" 
  | PRINTLN  -> "PRINTLN" 
  | RETURN  -> "RETURN" 
  | VOID  -> "VOID" 
  | WHILE  -> "WHILE" 
  | FORLOOP  -> "FORLOOP" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 
  | CSTBOOL _ -> "CSTBOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | PRINTLN  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | VOID  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | FORLOOP  -> (null : System.Object) 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 2us; 65535us; 0us; 4us; 4us; 4us; 8us; 65535us; 0us; 6us; 4us; 6us; 25us; 34us; 29us; 34us; 35us; 34us; 37us; 42us; 40us; 42us; 43us; 42us; 4us; 65535us; 9us; 11us; 10us; 11us; 14us; 15us; 16us; 17us; 2us; 65535us; 0us; 8us; 4us; 8us; 2us; 65535us; 25us; 26us; 29us; 30us; 3us; 65535us; 25us; 33us; 29us; 33us; 35us; 36us; 9us; 65535us; 27us; 28us; 31us; 32us; 37us; 54us; 40us; 54us; 43us; 54us; 58us; 54us; 59us; 54us; 64us; 54us; 73us; 54us; 3us; 65535us; 37us; 38us; 40us; 41us; 43us; 44us; 4us; 65535us; 37us; 40us; 40us; 40us; 43us; 40us; 58us; 76us; 7us; 65535us; 37us; 45us; 40us; 45us; 43us; 45us; 58us; 46us; 59us; 60us; 64us; 65us; 73us; 74us; 7us; 65535us; 37us; 47us; 40us; 47us; 43us; 47us; 58us; 47us; 59us; 75us; 64us; 77us; 73us; 78us; 33us; 65535us; 37us; 48us; 40us; 48us; 43us; 48us; 50us; 52us; 56us; 57us; 58us; 48us; 59us; 48us; 62us; 63us; 64us; 48us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 48us; 84us; 85us; 87us; 110us; 90us; 91us; 92us; 93us; 111us; 95us; 112us; 96us; 113us; 97us; 114us; 98us; 115us; 99us; 116us; 100us; 117us; 101us; 118us; 102us; 119us; 103us; 120us; 104us; 121us; 105us; 122us; 106us; 123us; 108us; 125us; 107us; 136us; 109us; 139us; 110us; 33us; 65535us; 37us; 81us; 40us; 81us; 43us; 81us; 50us; 81us; 56us; 81us; 58us; 81us; 59us; 81us; 62us; 81us; 64us; 81us; 67us; 81us; 69us; 81us; 71us; 81us; 73us; 81us; 84us; 81us; 87us; 81us; 90us; 81us; 92us; 81us; 111us; 81us; 112us; 81us; 113us; 81us; 114us; 81us; 115us; 81us; 116us; 81us; 117us; 81us; 118us; 81us; 119us; 81us; 120us; 81us; 121us; 81us; 122us; 81us; 123us; 81us; 125us; 82us; 136us; 81us; 139us; 81us; 34us; 65535us; 37us; 83us; 40us; 83us; 43us; 83us; 50us; 83us; 56us; 83us; 58us; 83us; 59us; 83us; 62us; 83us; 64us; 83us; 67us; 83us; 69us; 83us; 71us; 83us; 73us; 83us; 84us; 83us; 87us; 83us; 90us; 83us; 92us; 83us; 111us; 83us; 112us; 83us; 113us; 83us; 114us; 83us; 115us; 83us; 116us; 83us; 117us; 83us; 118us; 83us; 119us; 83us; 120us; 83us; 121us; 83us; 122us; 83us; 123us; 83us; 125us; 83us; 133us; 135us; 136us; 83us; 139us; 83us; 36us; 65535us; 37us; 80us; 40us; 80us; 43us; 80us; 50us; 80us; 56us; 80us; 58us; 80us; 59us; 80us; 62us; 80us; 64us; 80us; 67us; 80us; 69us; 80us; 71us; 80us; 73us; 80us; 84us; 80us; 87us; 80us; 90us; 80us; 92us; 80us; 111us; 80us; 112us; 80us; 113us; 80us; 114us; 80us; 115us; 80us; 116us; 80us; 117us; 80us; 118us; 80us; 119us; 80us; 120us; 80us; 121us; 80us; 122us; 80us; 123us; 80us; 125us; 79us; 127us; 128us; 130us; 131us; 133us; 134us; 136us; 80us; 139us; 80us; 1us; 65535us; 87us; 88us; 2us; 65535us; 87us; 138us; 139us; 140us; 34us; 65535us; 37us; 124us; 40us; 124us; 43us; 124us; 50us; 124us; 56us; 124us; 58us; 124us; 59us; 124us; 62us; 124us; 64us; 124us; 67us; 124us; 69us; 124us; 71us; 124us; 73us; 124us; 84us; 124us; 87us; 124us; 90us; 124us; 92us; 124us; 111us; 124us; 112us; 124us; 113us; 124us; 114us; 124us; 115us; 124us; 116us; 124us; 117us; 124us; 118us; 124us; 119us; 124us; 120us; 124us; 121us; 124us; 122us; 124us; 123us; 124us; 125us; 124us; 133us; 124us; 136us; 124us; 139us; 124us; 8us; 65535us; 0us; 10us; 4us; 10us; 25us; 9us; 29us; 9us; 35us; 9us; 37us; 9us; 40us; 9us; 43us; 9us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 18us; 23us; 26us; 29us; 33us; 43us; 47us; 52us; 60us; 68us; 102us; 136us; 171us; 208us; 210us; 213us; 248us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 2us; 6us; 13us; 3us; 6us; 10us; 11us; 1us; 7us; 2us; 7us; 13us; 1us; 8us; 3us; 8us; 10us; 11us; 1us; 9us; 3us; 9us; 10us; 11us; 1us; 9us; 2us; 10us; 11us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 15us; 2us; 16us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 3us; 22us; 28us; 31us; 1us; 23us; 14us; 24us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 1us; 24us; 2us; 25us; 26us; 1us; 25us; 14us; 26us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 1us; 26us; 1us; 27us; 3us; 28us; 31us; 32us; 3us; 28us; 31us; 32us; 16us; 28us; 31us; 32us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 3us; 28us; 31us; 32us; 2us; 28us; 31us; 1us; 28us; 2us; 29us; 33us; 2us; 29us; 33us; 15us; 29us; 33us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 2us; 29us; 33us; 1us; 29us; 2us; 30us; 34us; 2us; 30us; 34us; 15us; 30us; 34us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 2us; 30us; 34us; 15us; 30us; 34us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 2us; 30us; 34us; 15us; 30us; 34us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 2us; 30us; 34us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 4us; 35us; 38us; 60us; 63us; 3us; 35us; 38us; 63us; 1us; 36us; 2us; 36us; 57us; 1us; 37us; 1us; 38us; 14us; 38us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 2us; 39us; 59us; 1us; 39us; 1us; 39us; 1us; 39us; 1us; 40us; 14us; 40us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 1us; 41us; 14us; 41us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 1us; 42us; 14us; 43us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 14us; 43us; 44us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 14us; 43us; 44us; 45us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 14us; 43us; 44us; 45us; 46us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 14us; 43us; 44us; 45us; 46us; 47us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 14us; 43us; 44us; 45us; 46us; 47us; 48us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 14us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 14us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 50us; 51us; 52us; 53us; 54us; 55us; 14us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 51us; 52us; 53us; 54us; 55us; 14us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 52us; 53us; 54us; 55us; 14us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 53us; 54us; 55us; 14us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 54us; 55us; 13us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 14us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 55us; 14us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 63us; 15us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 66us; 67us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 2us; 57us; 60us; 1us; 57us; 1us; 58us; 2us; 58us; 63us; 1us; 59us; 1us; 60us; 2us; 60us; 63us; 1us; 60us; 2us; 61us; 62us; 2us; 61us; 63us; 1us; 62us; 1us; 63us; 1us; 63us; 1us; 65us; 1us; 67us; 1us; 67us; 1us; 68us; 1us; 69us; 1us; 70us; 1us; 70us; 1us; 71us; 1us; 72us; 1us; 73us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 23us; 27us; 29us; 32us; 34us; 38us; 40us; 44us; 46us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 106us; 108us; 123us; 125us; 128us; 130us; 145us; 147us; 149us; 153us; 157us; 174us; 178us; 181us; 183us; 186us; 189us; 205us; 208us; 210us; 213us; 216us; 232us; 235us; 251us; 254us; 270us; 273us; 275us; 277us; 279us; 281us; 283us; 288us; 292us; 294us; 297us; 299us; 301us; 316us; 319us; 321us; 323us; 325us; 327us; 342us; 344us; 359us; 361us; 376us; 391us; 406us; 421us; 436us; 451us; 466us; 481us; 496us; 511us; 526us; 541us; 555us; 570us; 585us; 601us; 603us; 605us; 607us; 609us; 611us; 613us; 615us; 617us; 619us; 621us; 623us; 625us; 627us; 629us; 632us; 634us; 636us; 639us; 641us; 643us; 646us; 648us; 651us; 654us; 656us; 658us; 660us; 662us; 664us; 666us; 668us; 670us; 672us; 674us; 676us; 678us; |]
let _fsyacc_action_rows = 148
let _fsyacc_actionTableElements = [|3us; 16386us; 25us; 147us; 28us; 146us; 33us; 23us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 3us; 16386us; 25us; 147us; 28us; 146us; 33us; 23us; 0us; 16387us; 1us; 32768us; 7us; 7us; 0us; 16388us; 0us; 16389us; 3us; 32768us; 1us; 16us; 22us; 14us; 37us; 12us; 3us; 32768us; 1us; 16us; 22us; 14us; 37us; 13us; 1us; 16390us; 5us; 19us; 0us; 16391us; 1us; 16391us; 1us; 29us; 3us; 32768us; 1us; 16us; 22us; 14us; 37us; 12us; 1us; 16392us; 5us; 19us; 3us; 32768us; 1us; 16us; 22us; 14us; 37us; 12us; 2us; 32768us; 2us; 18us; 5us; 19us; 0us; 16393us; 2us; 32768us; 6us; 20us; 38us; 21us; 0us; 16394us; 1us; 32768us; 6us; 22us; 0us; 16395us; 1us; 32768us; 37us; 24us; 1us; 32768us; 1us; 25us; 2us; 16398us; 25us; 147us; 28us; 146us; 1us; 32768us; 2us; 27us; 1us; 32768us; 3us; 37us; 0us; 16396us; 2us; 16398us; 25us; 147us; 28us; 146us; 1us; 32768us; 2us; 31us; 1us; 32768us; 3us; 37us; 0us; 16397us; 0us; 16399us; 1us; 16400us; 8us; 35us; 2us; 32768us; 25us; 147us; 28us; 146us; 0us; 16401us; 18us; 16403us; 1us; 125us; 3us; 37us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 25us; 147us; 27us; 55us; 28us; 146us; 29us; 145us; 30us; 92us; 31us; 94us; 32us; 50us; 34us; 61us; 35us; 66us; 37us; 86us; 38us; 141us; 39us; 142us; 1us; 32768us; 4us; 39us; 0us; 16402us; 18us; 16403us; 1us; 125us; 3us; 37us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 25us; 147us; 27us; 55us; 28us; 146us; 29us; 145us; 30us; 92us; 31us; 94us; 32us; 50us; 34us; 61us; 35us; 66us; 37us; 86us; 38us; 141us; 39us; 142us; 0us; 16404us; 1us; 32768us; 7us; 43us; 18us; 16403us; 1us; 125us; 3us; 37us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 25us; 147us; 27us; 55us; 28us; 146us; 29us; 145us; 30us; 92us; 31us; 94us; 32us; 50us; 34us; 61us; 35us; 66us; 37us; 86us; 38us; 141us; 39us; 142us; 0us; 16405us; 0us; 16406us; 1us; 16406us; 26us; 59us; 0us; 16407us; 14us; 32768us; 7us; 49us; 12us; 123us; 13us; 122us; 14us; 116us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 120us; 19us; 121us; 20us; 111us; 21us; 112us; 22us; 113us; 23us; 114us; 24us; 115us; 0us; 16408us; 12us; 32768us; 1us; 125us; 7us; 51us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 0us; 16409us; 14us; 32768us; 7us; 53us; 12us; 123us; 13us; 122us; 14us; 116us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 120us; 19us; 121us; 20us; 111us; 21us; 112us; 22us; 113us; 23us; 114us; 24us; 115us; 0us; 16410us; 0us; 16411us; 1us; 32768us; 1us; 56us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 14us; 32768us; 2us; 58us; 12us; 123us; 13us; 122us; 14us; 116us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 120us; 19us; 121us; 20us; 111us; 21us; 112us; 22us; 113us; 23us; 114us; 24us; 115us; 16us; 32768us; 1us; 125us; 3us; 37us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 27us; 55us; 29us; 145us; 30us; 92us; 31us; 94us; 32us; 50us; 34us; 61us; 35us; 66us; 37us; 86us; 38us; 141us; 39us; 142us; 16us; 32768us; 1us; 125us; 3us; 37us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 27us; 55us; 29us; 145us; 30us; 92us; 31us; 94us; 32us; 50us; 34us; 61us; 35us; 66us; 37us; 86us; 38us; 141us; 39us; 142us; 0us; 16412us; 1us; 32768us; 1us; 62us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 14us; 32768us; 2us; 64us; 12us; 123us; 13us; 122us; 14us; 116us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 120us; 19us; 121us; 20us; 111us; 21us; 112us; 22us; 113us; 23us; 114us; 24us; 115us; 16us; 32768us; 1us; 125us; 3us; 37us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 27us; 55us; 29us; 145us; 30us; 92us; 31us; 94us; 32us; 50us; 34us; 61us; 35us; 66us; 37us; 86us; 38us; 141us; 39us; 142us; 0us; 16413us; 1us; 32768us; 1us; 67us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 14us; 32768us; 7us; 69us; 12us; 123us; 13us; 122us; 14us; 116us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 120us; 19us; 121us; 20us; 111us; 21us; 112us; 22us; 113us; 23us; 114us; 24us; 115us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 14us; 32768us; 7us; 71us; 12us; 123us; 13us; 122us; 14us; 116us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 120us; 19us; 121us; 20us; 111us; 21us; 112us; 22us; 113us; 23us; 114us; 24us; 115us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 14us; 32768us; 2us; 73us; 12us; 123us; 13us; 122us; 14us; 116us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 120us; 19us; 121us; 20us; 111us; 21us; 112us; 22us; 113us; 23us; 114us; 24us; 115us; 16us; 32768us; 1us; 125us; 3us; 37us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 27us; 55us; 29us; 145us; 30us; 92us; 31us; 94us; 32us; 50us; 34us; 61us; 35us; 66us; 37us; 86us; 38us; 141us; 39us; 142us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 3us; 16419us; 2us; 132us; 5us; 136us; 9us; 84us; 2us; 16419us; 5us; 136us; 9us; 84us; 0us; 16420us; 1us; 16420us; 2us; 126us; 0us; 16421us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 13us; 16422us; 12us; 123us; 13us; 122us; 14us; 116us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 120us; 19us; 121us; 20us; 111us; 21us; 112us; 22us; 113us; 23us; 114us; 24us; 115us; 1us; 16443us; 1us; 87us; 11us; 16448us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 1us; 32768us; 2us; 89us; 0us; 16423us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 0us; 16424us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 13us; 16425us; 12us; 123us; 13us; 122us; 14us; 116us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 120us; 19us; 121us; 20us; 111us; 21us; 112us; 22us; 113us; 23us; 114us; 24us; 115us; 0us; 16426us; 3us; 16427us; 22us; 113us; 23us; 114us; 24us; 115us; 3us; 16428us; 22us; 113us; 23us; 114us; 24us; 115us; 0us; 16429us; 0us; 16430us; 0us; 16431us; 9us; 16432us; 16us; 118us; 17us; 119us; 18us; 120us; 19us; 121us; 20us; 111us; 21us; 112us; 22us; 113us; 23us; 114us; 24us; 115us; 9us; 16433us; 16us; 118us; 17us; 119us; 18us; 120us; 19us; 121us; 20us; 111us; 21us; 112us; 22us; 113us; 23us; 114us; 24us; 115us; 5us; 16434us; 20us; 111us; 21us; 112us; 22us; 113us; 23us; 114us; 24us; 115us; 5us; 16435us; 20us; 111us; 21us; 112us; 22us; 113us; 23us; 114us; 24us; 115us; 5us; 16436us; 20us; 111us; 21us; 112us; 22us; 113us; 23us; 114us; 24us; 115us; 5us; 16437us; 20us; 111us; 21us; 112us; 22us; 113us; 23us; 114us; 24us; 115us; 11us; 16438us; 14us; 116us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 120us; 19us; 121us; 20us; 111us; 21us; 112us; 22us; 113us; 23us; 114us; 24us; 115us; 13us; 32768us; 12us; 123us; 13us; 122us; 14us; 116us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 120us; 19us; 121us; 20us; 111us; 21us; 112us; 22us; 113us; 23us; 114us; 24us; 115us; 12us; 16439us; 13us; 122us; 14us; 116us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 120us; 19us; 121us; 20us; 111us; 21us; 112us; 22us; 113us; 23us; 114us; 24us; 115us; 14us; 32768us; 6us; 137us; 12us; 123us; 13us; 122us; 14us; 116us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 120us; 19us; 121us; 20us; 111us; 21us; 112us; 22us; 113us; 23us; 114us; 24us; 115us; 14us; 16450us; 8us; 139us; 12us; 123us; 13us; 122us; 14us; 116us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 120us; 19us; 121us; 20us; 111us; 21us; 112us; 22us; 113us; 23us; 114us; 24us; 115us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 0us; 16440us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 0us; 16441us; 3us; 32768us; 1us; 130us; 22us; 133us; 37us; 129us; 1us; 16442us; 5us; 136us; 0us; 16443us; 3us; 32768us; 1us; 130us; 22us; 133us; 37us; 129us; 2us; 32768us; 2us; 132us; 5us; 136us; 0us; 16444us; 8us; 32768us; 1us; 125us; 10us; 127us; 21us; 143us; 22us; 133us; 29us; 145us; 37us; 129us; 38us; 141us; 39us; 142us; 1us; 16445us; 5us; 136us; 0us; 16446us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 0us; 16447us; 0us; 16449us; 11us; 32768us; 1us; 125us; 10us; 127us; 11us; 90us; 21us; 143us; 22us; 133us; 29us; 145us; 30us; 92us; 31us; 94us; 37us; 86us; 38us; 141us; 39us; 142us; 0us; 16451us; 0us; 16452us; 0us; 16453us; 1us; 32768us; 38us; 144us; 0us; 16454us; 0us; 16455us; 0us; 16456us; 0us; 16457us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 7us; 8us; 12us; 13us; 15us; 16us; 17us; 21us; 25us; 27us; 28us; 30us; 34us; 36us; 40us; 43us; 44us; 47us; 48us; 50us; 51us; 53us; 55us; 58us; 60us; 62us; 63us; 66us; 68us; 70us; 71us; 72us; 74us; 77us; 78us; 97us; 99us; 100us; 119us; 120us; 122us; 141us; 142us; 143us; 145us; 146us; 161us; 162us; 175us; 176us; 191us; 192us; 193us; 195us; 207us; 222us; 239us; 256us; 257us; 259us; 271us; 286us; 303us; 304us; 306us; 318us; 333us; 345us; 360us; 372us; 387us; 404us; 405us; 406us; 407us; 408us; 409us; 413us; 416us; 417us; 419us; 420us; 432us; 446us; 448us; 460us; 462us; 463us; 475us; 476us; 488us; 502us; 503us; 507us; 511us; 512us; 513us; 514us; 524us; 534us; 540us; 546us; 552us; 558us; 570us; 584us; 597us; 612us; 627us; 639us; 651us; 663us; 675us; 687us; 699us; 711us; 723us; 735us; 747us; 759us; 771us; 783us; 784us; 796us; 797us; 801us; 803us; 804us; 808us; 811us; 812us; 821us; 823us; 824us; 836us; 837us; 838us; 850us; 851us; 852us; 853us; 855us; 856us; 857us; 858us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 2us; 2us; 1us; 2us; 1us; 2us; 3us; 3us; 4us; 6us; 6us; 0us; 1us; 1us; 3us; 3us; 0us; 2us; 3us; 1us; 1us; 2us; 2us; 3us; 1us; 7us; 5us; 9us; 7us; 5us; 5us; 9us; 1us; 1us; 1us; 3us; 4us; 2us; 2us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 3us; 2us; 1us; 3us; 2us; 2us; 4us; 0us; 1us; 1us; 3us; 1us; 1us; 2us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 13us; 13us; 13us; 13us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 16us; 17us; 17us; 17us; 17us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 20us; 20us; 21us; 21us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 16394us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 16397us; 16399us; 65535us; 65535us; 16401us; 65535us; 65535us; 16402us; 65535us; 16404us; 65535us; 65535us; 16405us; 16406us; 65535us; 16407us; 65535us; 16408us; 65535us; 16409us; 65535us; 16410us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; 16415us; 16416us; 16417us; 16418us; 65535us; 65535us; 16420us; 65535us; 16421us; 65535us; 65535us; 65535us; 65535us; 65535us; 16423us; 65535us; 65535us; 65535us; 65535us; 16426us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16440us; 65535us; 16441us; 65535us; 65535us; 16443us; 65535us; 65535us; 16444us; 65535us; 65535us; 16446us; 65535us; 16447us; 16449us; 65535us; 16451us; 16452us; 16453us; 65535us; 16454us; 16455us; 16456us; 16457us; |]
let _fsyacc_reductions ()  =    [| 
# 402 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 411 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "CPar.fsy"
                                                               Prog _1 
                   )
# 41 "CPar.fsy"
                 : Absyn.program));
# 422 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "CPar.fsy"
                                                               [] 
                   )
# 45 "CPar.fsy"
                 : 'Topdecs));
# 432 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "CPar.fsy"
                                                               _1 :: _2 
                   )
# 46 "CPar.fsy"
                 : 'Topdecs));
# 444 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "CPar.fsy"
                                                               Vardec (fst _1, snd _1) 
                   )
# 50 "CPar.fsy"
                 : 'Topdec));
# 455 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Fundec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "CPar.fsy"
                                                               _1 
                   )
# 51 "CPar.fsy"
                 : 'Topdec));
# 466 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "CPar.fsy"
                                                               ((fst _2) _1, snd _2) 
                   )
# 55 "CPar.fsy"
                 : 'Vardec));
# 478 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "CPar.fsy"
                                                               ((fun t -> t), _1)                      
                   )
# 59 "CPar.fsy"
                 : 'Vardesc));
# 489 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "CPar.fsy"
                                                               compose1 TypP _2                        
                   )
# 60 "CPar.fsy"
                 : 'Vardesc));
# 500 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "CPar.fsy"
                                                               _2                                      
                   )
# 61 "CPar.fsy"
                 : 'Vardesc));
# 511 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, None)) _1    
                   )
# 62 "CPar.fsy"
                 : 'Vardesc));
# 522 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, Some _3)) _1 
                   )
# 63 "CPar.fsy"
                 : 'Vardesc));
# 534 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "CPar.fsy"
                                                               Fundec(None,     _2, _4, _6) 
                   )
# 67 "CPar.fsy"
                 : 'Fundec));
# 547 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "CPar.fsy"
                                                               Fundec(Some(_1), _2, _4, _6) 
                   )
# 68 "CPar.fsy"
                 : 'Fundec));
# 561 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "CPar.fsy"
                                                               [] 
                   )
# 72 "CPar.fsy"
                 : 'Paramdecs));
# 571 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "CPar.fsy"
                                                               _1 
                   )
# 73 "CPar.fsy"
                 : 'Paramdecs));
# 582 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "CPar.fsy"
                                                               [_1]     
                   )
# 77 "CPar.fsy"
                 : 'Paramdecs1));
# 593 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 78 "CPar.fsy"
                 : 'Paramdecs1));
# 605 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "CPar.fsy"
                                                               Block _2 
                   )
# 82 "CPar.fsy"
                 : 'Block));
# 616 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "CPar.fsy"
                                                               [] 
                   )
# 86 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 626 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "CPar.fsy"
                                                               Stmt _1 :: _2 
                   )
# 87 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 638 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "CPar.fsy"
                                                               Dec (fst _1, snd _1) :: _3 
                   )
# 88 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 650 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "CPar.fsy"
                                                               _1 
                   )
# 92 "CPar.fsy"
                 : 'Stmt));
# 661 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "CPar.fsy"
                                                               _1 
                   )
# 93 "CPar.fsy"
                 : 'Stmt));
# 672 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "CPar.fsy"
                                                                   Expr(_1)                              
                   )
# 97 "CPar.fsy"
                 : 'StmtM));
# 683 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "CPar.fsy"
                                                                   Return None                           
                   )
# 98 "CPar.fsy"
                 : 'StmtM));
# 693 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "CPar.fsy"
                                                                   Return(Some(_2))                      
                   )
# 99 "CPar.fsy"
                 : 'StmtM));
# 704 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "CPar.fsy"
                                                                   _1                                    
                   )
# 100 "CPar.fsy"
                 : 'StmtM));
# 715 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "CPar.fsy"
                                                                   If(_3, _5, _7)                        
                   )
# 101 "CPar.fsy"
                 : 'StmtM));
# 728 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "CPar.fsy"
                                                                   While(_3, _5)                         
                   )
# 102 "CPar.fsy"
                 : 'StmtM));
# 740 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "CPar.fsy"
                                                                             Block[Stmt(Expr _3); Stmt (While(_5, Block[Stmt(_9); Stmt(Expr _7)]))] 
                   )
# 103 "CPar.fsy"
                 : 'StmtM));
# 754 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "CPar.fsy"
                                                                   If(_3, _5, _7)                        
                   )
# 107 "CPar.fsy"
                 : 'StmtU));
# 767 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "CPar.fsy"
                                                                   If(_3, _5, Block [])                  
                   )
# 108 "CPar.fsy"
                 : 'StmtU));
# 779 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "CPar.fsy"
                                                                   While(_3, _5)                         
                   )
# 109 "CPar.fsy"
                 : 'StmtU));
# 791 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "CPar.fsy"
                                                                             Block[Stmt(Expr _3); Stmt (While(_5, Block[Stmt(_9); Stmt(Expr _7)]))] 
                   )
# 110 "CPar.fsy"
                 : 'StmtU));
# 805 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "CPar.fsy"
                                                               Access _1           
                   )
# 114 "CPar.fsy"
                 : 'Expr));
# 816 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "CPar.fsy"
                                                               _1                  
                   )
# 115 "CPar.fsy"
                 : 'Expr));
# 827 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "CPar.fsy"
                                                               _1                  
                   )
# 119 "CPar.fsy"
                 : 'ExprNotAccess));
# 838 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "CPar.fsy"
                                                               Assign(_1, _3)      
                   )
# 120 "CPar.fsy"
                 : 'ExprNotAccess));
# 850 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "CPar.fsy"
                                                               Call(_1, _3)        
                   )
# 121 "CPar.fsy"
                 : 'ExprNotAccess));
# 862 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "CPar.fsy"
                                                               Prim1("!", _2)      
                   )
# 122 "CPar.fsy"
                 : 'ExprNotAccess));
# 873 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "CPar.fsy"
                                                               Prim1("printi", _2) 
                   )
# 123 "CPar.fsy"
                 : 'ExprNotAccess));
# 884 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "CPar.fsy"
                                                               Prim1("printc", nl) 
                   )
# 124 "CPar.fsy"
                 : 'ExprNotAccess));
# 894 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "CPar.fsy"
                                                               Prim2("+",  _1, _3) 
                   )
# 125 "CPar.fsy"
                 : 'ExprNotAccess));
# 906 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "CPar.fsy"
                                                               Prim2("-",  _1, _3) 
                   )
# 126 "CPar.fsy"
                 : 'ExprNotAccess));
# 918 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "CPar.fsy"
                                                               Prim2("*",  _1, _3) 
                   )
# 127 "CPar.fsy"
                 : 'ExprNotAccess));
# 930 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "CPar.fsy"
                                                               Prim2("/",  _1, _3) 
                   )
# 128 "CPar.fsy"
                 : 'ExprNotAccess));
# 942 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "CPar.fsy"
                                                               Prim2("%",  _1, _3) 
                   )
# 129 "CPar.fsy"
                 : 'ExprNotAccess));
# 954 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "CPar.fsy"
                                                               Prim2("==", _1, _3) 
                   )
# 130 "CPar.fsy"
                 : 'ExprNotAccess));
# 966 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "CPar.fsy"
                                                               Prim2("!=", _1, _3) 
                   )
# 131 "CPar.fsy"
                 : 'ExprNotAccess));
# 978 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "CPar.fsy"
                                                               Prim2(">",  _1, _3) 
                   )
# 132 "CPar.fsy"
                 : 'ExprNotAccess));
# 990 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "CPar.fsy"
                                                               Prim2("<",  _1, _3) 
                   )
# 133 "CPar.fsy"
                 : 'ExprNotAccess));
# 1002 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "CPar.fsy"
                                                               Prim2(">=", _1, _3) 
                   )
# 134 "CPar.fsy"
                 : 'ExprNotAccess));
# 1014 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "CPar.fsy"
                                                               Prim2("<=", _1, _3) 
                   )
# 135 "CPar.fsy"
                 : 'ExprNotAccess));
# 1026 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "CPar.fsy"
                                                               Andalso(_1, _3)     
                   )
# 136 "CPar.fsy"
                 : 'ExprNotAccess));
# 1038 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "CPar.fsy"
                                                               Orelse(_1, _3)      
                   )
# 137 "CPar.fsy"
                 : 'ExprNotAccess));
# 1050 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "CPar.fsy"
                                                               CstI _1             
                   )
# 141 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1061 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "CPar.fsy"
                                                               _2                  
                   )
# 142 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1072 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "CPar.fsy"
                                                               Addr _2             
                   )
# 143 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1083 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "CPar.fsy"
                                                               AccVar _1           
                   )
# 147 "CPar.fsy"
                 : 'Access));
# 1094 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "CPar.fsy"
                                                               _2                  
                   )
# 148 "CPar.fsy"
                 : 'Access));
# 1105 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "CPar.fsy"
                                                               AccDeref (Access _2)
                   )
# 149 "CPar.fsy"
                 : 'Access));
# 1116 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "CPar.fsy"
                                                               AccDeref _2         
                   )
# 150 "CPar.fsy"
                 : 'Access));
# 1127 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "CPar.fsy"
                                                               AccIndex(_1, _3)    
                   )
# 151 "CPar.fsy"
                 : 'Access));
# 1139 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "CPar.fsy"
                                                               []       
                   )
# 155 "CPar.fsy"
                 : 'Exprs));
# 1149 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "CPar.fsy"
                                                               _1       
                   )
# 156 "CPar.fsy"
                 : 'Exprs));
# 1160 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "CPar.fsy"
                                                               [_1]     
                   )
# 160 "CPar.fsy"
                 : 'Exprs1));
# 1171 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 161 "CPar.fsy"
                 : 'Exprs1));
# 1183 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "CPar.fsy"
                                                               _1       
                   )
# 165 "CPar.fsy"
                 : 'Const));
# 1194 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "CPar.fsy"
                                                               _1       
                   )
# 166 "CPar.fsy"
                 : 'Const));
# 1205 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "CPar.fsy"
                                                               - _2     
                   )
# 167 "CPar.fsy"
                 : 'Const));
# 1216 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "CPar.fsy"
                                                               -1       
                   )
# 168 "CPar.fsy"
                 : 'Const));
# 1226 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "CPar.fsy"
                                                               TypI     
                   )
# 172 "CPar.fsy"
                 : 'Type));
# 1236 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "CPar.fsy"
                                                               TypC     
                   )
# 173 "CPar.fsy"
                 : 'Type));
|]
# 1247 "CPar.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 43;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
